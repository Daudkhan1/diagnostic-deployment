version: "3.8"
services:
  cantaloupe:
    image: islandora/cantaloupe:3
    ports: ["8182:8182"]
    environment:
      - CANTALOUPE_HEAP_MIN=3G
      - CANTALOUPE_HEAP_MAX=5G
      - CANTALOUPE_HTTP_PORT=8182
      - CANTALOUPE_SOURCE_STATIC=S3Source
      - CANTALOUPE_S3SOURCE_ACCESS_KEY_ID=${PRAID_S3_ACCESS_KEY_ID}
      - CANTALOUPE_S3SOURCE_SECRET_KEY=${PRAID_S3_SECRET_ACCESS_KEY}
      - CANTALOUPE_S3SOURCE_BASICLOOKUPSTRATEGY_BUCKET_NAME=${PRAID_S3_BUCKET_NAME}
      - CANTALOUPE_S3SOURCE_REGION=${PRAID_S3_REGION_NAME}
    volumes:
      - type: bind
        source: /home/ubuntu/delegates.rb
        target: /opt/cantaloupe/delegates.rb
    networks: [app-network]
    deploy: # <-- ADDED BACK
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 1
        delay: 10s
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }
  mongo:
    image: mongo:latest
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports: ["27017:27017"]
    networks: [app-network]
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - type: bind
        source: /home/ubuntu/dump
        target: /dump
    deploy: # <-- ADDED BACK
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }
  mongo-init:
    image: mongo:latest
    depends_on: [mongo]
    entrypoint: >
      bash -c "
      for i in {1..30}; do
        echo 'Waiting for Mongo...';
        sleep 2;
        mongosh --host mongo --port 27017 --eval '
          try {
            rs.status();
          } catch (e) {
            rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"mongo:27017\"}]});
          }' && break;
      done;
      echo 'MongoDB replica set initiated.'"
    networks: [app-network]
    deploy: # <-- PRESERVED
      replicas: 1
      restart_policy: { condition: none }
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }
 
  react_app:
    image: 831926608672.dkr.ecr.ap-south-1.amazonaws.com/diagnostic-ui:dev-dcef9e6
    ports: ["5173:5173"]
    environment: { NODE_ENV: production }
    networks: [app-network]
    deploy: # <-- ADDED BACK
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 1
        delay: 10s
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }
 
  springboot-app:
    image: 831926608672.dkr.ecr.ap-south-1.amazonaws.com/diagnostic-runtime:updated
    ports: ["8080:8080"]
    environment:
      - SPRING_DATA_MONGODB_URI=${DB_MONGO_URL_PROD}
      - SPRING_PROFILES_ACTIVE=without-ai-annotation
      - ANONYMIZER_SERVICE_URL=http://13.233.103.240:8001
    networks: [app-network]
    depends_on: [mongo-init]
    deploy: # <-- ADDED BACK
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10
      update_config:
        delay: 10s
        order: start-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 1
        delay: 10s
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }
 
  anonymizer-service:
    image: 831926608672.dkr.ecr.ap-south-1.amazonaws.com/diagnostic-anonymizer:dev-cde2c20
    ports: ["8001:8001"]
    environment:
      - AMAZON_S3_ACCESS_KEY_ID=${PRAID_S3_ACCESS_KEY_ID}
      - AMAZON_S3_SECRET_ACCESS_KEY=${PRAID_S3_SECRET_ACCESS_KEY}
      - AMAZON_S3_REGION_NAME=${PRAID_S3_REGION_NAME}
    networks: [app-network]
    deploy: # <-- ADDED BACK
      replicas: 1
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 1
        delay: 10s
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }


  portainer:
    image: portainer/portainer-ce
    ports: ["9000:9000"]
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: volume
        source: portainer_data
        target: /data
    deploy: # <-- PRESERVED
      placement: { constraints: ["node.role == manager"] }
      replicas: 1
      restart_policy: { condition: on-failure }
    networks: [app-network]
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }

  # --- EFK STACK SERVICES ---
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ports: ["9200:9200"]
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks: [app-network]
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy: # <-- Added sensible defaults
      replicas: 1
      restart_policy: { condition: on-failure }
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    ports: ["5601:5601"]
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks: [app-network]
    depends_on:
      - elasticsearch
    deploy: # <-- Added sensible defaults
      replicas: 1
      restart_policy: { condition: on-failure }
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }
  fluentd:
    image: 831926608672.dkr.ecr.ap-south-1.amazonaws.com/fluentd-custom:latest
    ports:
      - { target: 24224, published: 24224, protocol: tcp, mode: host }
      - { target: 24224, published: 24224, protocol: udp, mode: host }
    volumes:
      - type: bind
        source: /home/ubuntu/fluentd/etc
        target: /fluentd/etc
      - fluentd_data:/fluentd/log
    networks: [app-network]
    depends_on:
      - elasticsearch
    deploy: # <-- Added sensible defaults
      replicas: 1
      restart_policy: { condition: on-failure }
    logging:
      driver: "fluentd"
      options: { fluentd-address: localhost:24224, tag: "docker.{{.Name}}" }


volumes:
  mongo_data:
    name: ubuntu_mongo_data
    external: true
  mongo_config:
    name: ubuntu_mongo_config
    external: true
  mongo_dump_data:
  portainer_data:
  esdata:
  fluentd_data:

networks:
  app-network:
    driver: overlay
 
 