name: Deploy to EC2 using AWS CLI

on:
  repository_dispatch:
    types: [web-trigger]

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
              # Step 2: Configure AWS CLI
      
      # Step 2: Checkout code
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AMAZON_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AMAZON_S3_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AMAZON_S3_REGION_NAME }}
          
      # Step 3: Set environment variables based on branch
      - name: Set environment variables
        id: set-env
        run: |
          FULL_REF="${{ github.event.client_payload.branch }}"
          BRANCH=${FULL_REF#refs/heads/}
          echo "Triggered branch: $BRANCH"

          if [ "$BRANCH" == "main" ]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
            echo "DB_MONGO_URL=${{ secrets.DB_MONGO_URL_PROD }}" >> $GITHUB_ENV
            echo "EC2_INSTANCE=${{ secrets.PROD_EC2_INSTANCE }}" >> $GITHUB_ENV
            echo "FRONTEND_IMAGE=${{ secrets.ECR_URI }}/diagnostic-runtime:latest" >> $GITHUB_ENV
            echo "BACKEND_IMAGE=${{ secrets.ECR_URI }}/diagnostic-ui:latest" >> $GITHUB_ENV
            echo "ANONYMIZER_IMAGE=${{ secrets.ECR_URI }}/diagnostic-anonymizer:latest" >> $GITHUB_ENV
          elif [ "$BRANCH" == "development" ]; then
            echo "DEPLOY_ENV=development" >> $GITHUB_ENV
            echo "DB_MONGO_URL=${{ secrets.DB_MONGO_URL_PROD }}" >> $GITHUB_ENV
            echo "EC2_INSTANCE=${{ secrets.PROD_EC2_INSTANCE }}" >> $GITHUB_ENV
            echo "FRONTEND_IMAGE=${{ secrets.ECR_URI }}/diagnostic-runtime:dev" >> $GITHUB_ENV
            echo "BACKEND_IMAGE=${{ secrets.ECR_URI }}/diagnostic-ui:dev" >> $GITHUB_ENV
            echo "ANONYMIZER_IMAGE=${{ secrets.ECR_URI }}/diagnostic-anonymizer:dev" >> $GITHUB_ENV
          fi
      - name: Debug File Paths
        run: |
          echo "DEPLOY_ENV=${DEPLOY_ENV}"
          echo "Checking file: ${DEPLOY_ENV}/docker-stack.yml"
          ls -R
          

      # Step 4: Replace placeholders in docker-stack.yml with secrets
      - name: Replace placeholders in docker-stack.yml
        run: |
          FILE_PATH="${DEPLOY_ENV}/docker-stack.yml"

          if [ ! -f "$FILE_PATH" ]; then
            echo "Error: $FILE_PATH not found!"
            exit 1
          fi

          # Escape Mongo URL for sed
          ESCAPED_MONGO_URL=$(printf '%s\n' "${DB_MONGO_URL}" | sed 's/[&/$]/\\&/g')

          sed -i "s|\${DB_MONGO_URL_PROD}|${ESCAPED_MONGO_URL}|g" "$FILE_PATH"
          sed -i "s|\${PRAID_S3_BUCKET_NAME}|${PRAID_S3_BUCKET_NAME}|g" "$FILE_PATH"
          sed -i "s|\${PRAID_S3_REGION_NAME}|${PRAID_S3_REGION_NAME}|g" "$FILE_PATH"
          sed -i "s|\${PRAID_S3_ACCESS_KEY_ID}|${PRAID_S3_ACCESS_KEY_ID}|g" "$FILE_PATH"
          sed -i "s|\${PRAID_S3_SECRET_ACCESS_KEY}|${PRAID_S3_SECRET_ACCESS_KEY}|g" "$FILE_PATH"
        env:
          DEPLOY_ENV: ${{ env.DEPLOY_ENV }}                  # Replace with your actual deployment folder
          DB_MONGO_URL: ${{ secrets.DB_MONGO_URL_PROD }}
          PRAID_S3_BUCKET_NAME: ${{ secrets.PRAID_S3_BUCKET_NAME }}
          PRAID_S3_REGION_NAME: ${{ secrets.PRAID_S3_REGION_NAME }}
          PRAID_S3_ACCESS_KEY_ID: ${{ secrets.PRAID_S3_ACCESS_KEY_ID }}
          PRAID_S3_SECRET_ACCESS_KEY: ${{ secrets.PRAID_S3_SECRET_ACCESS_KEY }}

      # Step 5: Upload Docker Compose to S3
      - name: Upload Docker Compose to S3
        run: |
          aws s3 cp ${DEPLOY_ENV}/docker-stack.yml s3://${{ secrets.S3_BUCKET_NAME }}/${DEPLOY_ENV}/docker-stack.yml
       # New Step: Upload delegates.rb to S3
      - name: Upload delegates.rb to S3
        run: |
          aws s3 cp delegates.rb s3://${{ secrets.S3_BUCKET_NAME }}/${DEPLOY_ENV}/delegates.rb



      # - name: Copy Docker Compose file to EC2
      #   run: |
      #     echo "Sending SSM command to copy Docker Compose file..."
      #     echo DEPLOY_ENV=${DEPLOY_ENV}

      #     COMMAND_ID=$(aws ssm send-command \
      #       --document-name "AWS-RunShellScript" \
      #       --targets "Key=instanceIds,Values=${{ secrets.PROD_EC2_INSTANCE }}" \
      #       --parameters '{"commands": [
      #         "echo Trying to fetch docker-stack.yml from s3://${{ secrets.S3_BUCKET_NAME }}/${{ env.DEPLOY_ENV }}/docker-stack.yml",
      #         "aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/${{ env.DEPLOY_ENV }}/docker-stack.yml /home/ubuntu/docker-stack.yml",
      #         "echo Fetching delegates.rb file...",
      #         "aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/${{ env.DEPLOY_ENV }}/delegates.rb /home/ubuntu/delegates.rb"
      #       ]}' \
      #       --comment "Copy Docker Compose file and delegates.rb to EC2" \
      #       --region "${{ secrets.AMAZON_S3_REGION_NAME }}" \
      #       --query "Command.CommandId" \
      #       --output text)

      #     echo "SSM Command ID: $COMMAND_ID"

      #     STATUS="Pending"
      #     for i in {1..30}; do
      #       echo "Polling SSM status... attempt $i"
      #       STATUS=$(aws ssm list-command-invocations \
      #         --command-id "$COMMAND_ID" \
      #         --details \
      #         --region "${{ secrets.AMAZON_S3_REGION_NAME }}" \
      #         --query "CommandInvocations[0].Status" \
      #         --output text)
      #       echo "Current status: $STATUS"

      #       if [ "$STATUS" == "Success" ]; then
      #         echo "Copy completed successfully."
      #         break
      #       elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
      #         echo "SSM command failed with status: $STATUS"
      #         ERROR_OUTPUT=$(aws ssm list-command-invocations \
      #           --command-id "$COMMAND_ID" \
      #           --details \
      #           --region "${{ secrets.AMAZON_S3_REGION_NAME }}" \
      #           --query "CommandInvocations[0].CommandPlugins[0].Output" \
      #           --output text)
      #         echo "Error Output:"
      #         echo "$ERROR_OUTPUT"
      #         exit 1
      #       fi
      #       sleep 10
      #     done

      #     if [ "$STATUS" != "Success" ]; then
      #       echo "SSM command did not finish successfully in time. Final status: $STATUS"
      #       exit 1
      #     fi
      #   env:
      #      PROD_EC2_INSTANCE: ${{ secrets.PROD_EC2_INSTANCE }}
      #      AMAZON_S3_REGION_NAME: ${{ secrets.AMAZON_S3_REGION_NAME }}
      #      ECR_URI: ${{ secrets.ECR_URI }}}

          
      # Step 7 Deploy on AWS
      - name: Deploy on EC2 via SSM
        run: |
          echo "Sending SSM command to deploy..."

          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=${{ secrets.PROD_EC2_INSTANCE }}" \
            --parameters '{"commands": [

              "#!/bin/bash",
              "echo Trying to fetch docker-stack.yml from s3://${{ secrets.S3_BUCKET_NAME }}/${{ env.DEPLOY_ENV }}/docker-stack.yml",
              "aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/${{ env.DEPLOY_ENV }}/docker-stack.yml /home/ubuntu/docker-stack.yml",
              "echo Fetching delegates.rb file...",
              "aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/${{ env.DEPLOY_ENV }}/delegates.rb /home/ubuntu/delegates.rb",
              "echo Checking docker and docker-compose paths...",
              "which docker",
              "docker --version",

              "echo Logging into AWS ECR...",
              "aws ecr get-login-password --region ${{ secrets.AMAZON_S3_REGION_NAME }} | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}",
              
              "cd /home/ubuntu",
              "docker swarm init || echo Already initialized",
              "echo Enabling Docker Swarm...",
              "echo Deploying with Docker Stack...",
              "sudo docker stack deploy -c /home/ubuntu/docker-stack.yml --with-registry-auth praid",
              "echo Deployment complete!"
            ]}' \
            --comment "Swarm Deployment with Zero Downtime" \
            --region "${{ secrets.AMAZON_S3_REGION_NAME }}" \
            --query "Command.CommandId" \
            --output text)

          echo "Command ID: $COMMAND_ID"

          STATUS="Pending"
          for i in {1..30}; do
            echo "Polling SSM status... attempt $i"
            STATUS=$(aws ssm list-command-invocations \
              --command-id "$COMMAND_ID" \
              --details \
              --region "${{ secrets.AMAZON_S3_REGION_NAME }}" \
              --query "CommandInvocations[0].Status" \
              --output text)
            echo "Current status: $STATUS"

            if [ "$STATUS" == "Success" ]; then
              echo "Deployment completed successfully."
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
              echo "Deployment failed with status: $STATUS"
              ERROR_OUTPUT=$(aws ssm list-command-invocations \
                --command-id "$COMMAND_ID" \
                --details \
                --region "${{ secrets.AMAZON_S3_REGION_NAME }}" \
                --query "CommandInvocations[0].CommandPlugins[0].Output" \
                --output text)
              echo "Error Output:"
              echo "$ERROR_OUTPUT"
              exit 1
            fi

            sleep 10
          done

          if [ "$STATUS" != "Success" ]; then
            echo "Deployment did not complete in time. Final status: $STATUS"
            exit 1
          fi
        env:
          PROD_EC2_INSTANCE: ${{ secrets.PROD_EC2_INSTANCE }}
          AMAZON_S3_REGION_NAME: ${{ secrets.AMAZON_S3_REGION_NAME }}
          ECR_URI: ${{ secrets.ECR_URI }}
